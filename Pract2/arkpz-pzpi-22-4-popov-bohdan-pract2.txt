МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»

ЗВІТ
до практичного заняття №2 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Методи рефакторингу коду программного забезпечення»

Виконав:

Прийняв:

ст. гр. ПЗПІ-22-4

ст. викладач кафедри ПІ

Попов Богдан Сергійович

Сокорчук Ігор Петрович

Харків 2024

1 МЕТА
Навчитися ідентифікувати проблеми в коді та використовувати відповідні
методи рефакторингу для покращення його якості.
2 ЗАВДАННЯ
Cтудент повинен обрати три методи рефакторингу коду із книги Мартіна
Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади
свого особистого коду (з курсових, лабораторних або інших проєктів), який
потребує покращення, та продемонструвати застосування обраних методів.

3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить всі
обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку А.

ВИСНОВКИ
Ми вивчили основи рефакторингу коду та його значення для покращення
якості програмного забезпечення. Після застосування кожного методу ми побачили
значне покращення структури та читабельності коду. Ці зміни також зробили код
легшим для підтримки та розширення.

Посилання на відео презентацію Посилання на GitHub репозиторій

Методи рефакторингу коду програмного
забезпечення
Рефакторинг — це процес перетворення внутрішньої структури
програмного забезпечення без зміни зовнішньої поведінки. Метою
рефакторингу є покращення якості коду, зростання його читабельності,
гнучкості та продуктивності.
Головний принцип рефакторингу — залишити зовнішню поведінку програми
(функціональність) незмінною, зосередившись на внутрішній структурі.

Підготував ст. гр. ПЗПІ-22-4
Попов Богдан Сергійович

preencoded.png

Заміна вкладених умовних операторів на
захисні умовні блоки
Вкладені умовні оператори

Захисні умовні блоки

Вкладені умовні оператори ускладнюють читання та

Захисні умовні блоки дозволяють вийти з функції, якщо

розуміння коду. Їхнє читання може бути стомлюючим, а

умова не виконується, зробивши код простішим та

внесення змін - ризикованим.

легшим для розуміння.

Код до рефакторингу

Код після рефакторингу

preencoded.png

Інкапсуляція колекції
Відкрита колекція

Інкапсуляція

Відкрита колекція може бути модифікована будь-якою

Інкапсуляція колекції приховує її внутрішню реалізацію,

частиною коду, що може призвести до непередбачуваних

захищаючи її від змін та забезпечуючи централізований

побічних ефектів.

доступ до даних.

Код до рефакторингу

Код після рефакторингу

preencoded.png

Заміна умовної логіки поліморфізмом
Умовна логіка

Поліморфізм

Умовна логіка робить код громіздким та складним для

Поліморфізм дозволяє використовувати різні типи

підтримки. Додавання нових типів може вимагати

об'єктів з одним і тим же інтерфейсом, що робить код

модифікації умовних операторів.

більш гнучким та масштабованим.

Код до рефакторингу

Код після рефакторингу

preencoded.png

Покращення
читабельності та
підтримки коду
1

3

Зменшення
складності

2

Зменшення
кількості помилок

Рефакторинг спрощує код,

Простий код зменшує

роблячи його легшим для

ймовірність помилок та

розуміння та модифікації.

полегшує їх виправлення.

Зменшення технічного боргу
Рефакторинг коду покращує його якість, знижуючи технічний
борг, накопичений з часом.
preencoded.png

Підвищення гнучкості та масштабованості
додатку
1

2

3

Зменшення залежностей

Поліпшення повторного використання коду
Збільшення гнучкості та масштабованості

preencoded.png

Переваги рефакторингу коду

1

2

Зменшення часу розробки
Рефакторинг робить код легшим для

Зменшення вартості
розробки

модифікації, скорочуючи час розробки

Простий код легше підтримувати та

та впровадження нових функцій.

вносити зміни, що зменшує загальну
вартість розробки.

3
Зменшення ризику помилок
Простий код зменшує ймовірність
помилок, покращуючи стабільність і
надійність програми.
preencoded.png

Підсумки та ключові висновки
Рефакторинг — це важливий процес, який покращує якість коду та підвищує гнучкість та масштабованість програмного
забезпечення. Він дає змогу створити більш надійний, підтримуваний та зрозумілий код, що веде до зменшення ризиків та

скорочення часу розробки.

preencoded.png

Список використаних джерел
• Фаулер Мартін. «Refactoring: Improving the Design of Existing Code»

• Фаулер Мартін. «Refactoring: Improving the Design of Existing Code» (2-е видання)
• Мартін Роберт. «Clean Code: A Handbook of Agile Software Craftsmanship»
• Хант Ендрю та Томас Девід. «The Pragmatic Programmer»

preencoded.png

